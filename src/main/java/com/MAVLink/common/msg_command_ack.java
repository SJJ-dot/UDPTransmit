/* AUTO-GENERATED FILE.  DO NOT MODIFY.
 *
 * This class was automatically generated by the
 * java mavlink generator tool. It should not be modified by hand.
 */

// MESSAGE COMMAND_ACK PACKING
package com.MAVLink.common;
import com.MAVLink.MAVLinkPacket;
import com.MAVLink.Messages.MAVLinkMessage;
import com.MAVLink.Messages.MAVLinkPayload;

/**
* Report status of a command. Includes feedback wether the command was executed.
*/
public class msg_command_ack extends MAVLinkMessage{
    public static final int RESULT_ACCEPTED = 0; /* Command ACCEPTED and EXECUTED | */
    public static final int RESULT_TEMPORARILY_REJECTED = 1; /* Command TEMPORARY REJECTED/DENIED | */
    public static final int RESULT_DENIED = 2; /* Command PERMANENTLY DENIED | */
    public static final int RESULT_UNSUPPORTED = 3; /* Command UNKNOWN/UNSUPPORTED | */
    public static final int RESULT_FAILED = 4; /* Command executed, but retry | */
    public static final int RESULT_ENUM_END = 5; /*  | */

    public static final int MAVLINK_MSG_ID_COMMAND_ACK = 77;
    public static final int MAVLINK_MSG_LENGTH = 3;
    private static final long serialVersionUID = MAVLINK_MSG_ID_COMMAND_ACK;


    
    /**
    * Command ID, as defined by MAV_CMD enum.
    */
    public int command;
    
    /**
    * See MAV_RESULT enum
    */
    public short result;
    public String getResultText(){
        return getResultText(result);
    }
    public static String getResultText(short result) {
        String resultStr;
        switch (result) {
            case msg_command_ack.RESULT_ACCEPTED:
                resultStr = "设置成功";
                break;
            case msg_command_ack.RESULT_TEMPORARILY_REJECTED:
                resultStr = "设置被临时拒绝";
                break;
            case msg_command_ack.RESULT_DENIED:
                resultStr = "设置被拒绝";
                break;
            case msg_command_ack.RESULT_UNSUPPORTED:
                resultStr = "不支持的设置";
                break;
            case msg_command_ack.RESULT_FAILED:
                resultStr = "设置失败";
                break;
            case msg_command_ack.RESULT_ENUM_END:
                resultStr = "ENUM_END";
                break;
            default:
                resultStr = "default";
                break;
        }
        return resultStr;
    }

    /**
    * Generates the payload for a mavlink message for a message of this type
    * @return
    */
    public MAVLinkPacket pack(){
        MAVLinkPacket packet = new MAVLinkPacket(MAVLINK_MSG_LENGTH);
        packet.sysid = 255;
        packet.compid = 190;
        packet.msgid = MAVLINK_MSG_ID_COMMAND_ACK;
        
        packet.payload.putUnsignedShort(command);
        
        packet.payload.putUnsignedByte(result);
        
        return packet;
    }

    /**
    * Decode a command_ack message into this class fields
    *
    * @param payload The message to decode
    */
    public void unpack(MAVLinkPayload payload) {
        payload.resetIndex();
        
        this.command = payload.getUnsignedShort();
        
        this.result = payload.getUnsignedByte();
        
    }

    /**
    * Constructor for a new message, just initializes the msgid
    */
    public msg_command_ack(){
        msgid = MAVLINK_MSG_ID_COMMAND_ACK;
    }

    /**
    * Constructor for a new message, initializes the message with the payload
    * from a mavlink packet
    *
    */
    public msg_command_ack(MAVLinkPacket mavLinkPacket){
        this.sysid = mavLinkPacket.sysid;
        this.compid = mavLinkPacket.compid;
        this.msgid = MAVLINK_MSG_ID_COMMAND_ACK;
        unpack(mavLinkPacket.payload);
    }

        
    /**
    * Returns a string with the MSG name and data
    */
    public String toString(){
        return "MAVLINK_MSG_ID_COMMAND_ACK -"+" command:"+command+" result:"+result+"";
    }
}
        